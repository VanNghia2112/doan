const express = require("express");
const router = express.Router();

const Trip = require('../models/Trip');
const Booking = require('../models/Booking');
const verifyAdmin = require('../middleware/verifyAdmin');

// üîπ Danh s√°ch tuy·∫øn ƒë∆∞·ªùng & ƒëi·ªÉm ƒë√≥n/tr·∫£
const routes = {
    "Lagi - TP. H·ªì Ch√≠ Minh": {
        pickupPoints: ["Ch·ª£ Lagi", "Ch·ª£ T√¢n An", "C√¥ng vi√™n B√°c H·ªì", "Trung t√¢m h√†nh ch√≠nh Huy·ªán H√†m T√¢n"],
        dropOffPoints: ["B·∫øn Xe Mi·ªÅn ƒê√¥ng", "Qu·∫≠n 1", "Qu·∫≠n 2", "B√¨nh Th·∫°nh", "Th·ªß ƒê·ª©c"]
    },
    "TP. H·ªì Ch√≠ Minh - Lagi": {
        pickupPoints: ["B·∫øn Xe Mi·ªÅn ƒê√¥ng", "Qu·∫≠n 1", "Th·ªß ƒê·ª©c"],
        dropOffPoints: ["Ch·ª£ Lagi", "C√¥ng vi√™n B√°c H·ªì"]
    },
    "Lagi - ƒê√† L·∫°t": {
        pickupPoints: ["Ch·ª£ Lagi", "B·∫øn xe Lagi"],
        dropOffPoints: ["Ch·ª£ ƒê√† L·∫°t", "H·ªì Xu√¢n H∆∞∆°ng"]
    },
    "ƒê√† L·∫°t - Lagi": {
        pickupPoints: ["Ch·ª£ ƒê√† L·∫°t", "H·ªì Xu√¢n H∆∞∆°ng"],
        dropOffPoints: ["B·∫øn xe Lagi", "Ch·ª£ Lagi"]
    },
    "Lagi - Nha Trang": {
        pickupPoints: ["Ch·ª£ Lagi", "Trung t√¢m Lagi"],
        dropOffPoints: ["B·∫øn xe Ph√≠a Nam", "Ch·ª£ ƒê·∫ßm"]
    },
    "Nha Trang - Lagi": {
        pickupPoints: ["Ch·ª£ ƒê·∫ßm", "Vinpearl Nha Trang"],
        dropOffPoints: ["Ch·ª£ Lagi"]
    }
};

// üîπ Danh s√°ch m·∫´u tuy·∫øn v√† th·ªùi gian
const routeTemplates = [
    // Lagi ‚áÑ TP.HCM
    { route: "Lagi - TP. H·ªì Ch√≠ Minh", time: "06:00", price: 200000 },
    { route: "Lagi - TP. H·ªì Ch√≠ Minh", time: "12:00", price: 200000 },
    { route: "Lagi - TP. H·ªì Ch√≠ Minh", time: "18:00", price: 200000 },
    { route: "TP. H·ªì Ch√≠ Minh - Lagi", time: "06:00", price: 200000 },
    { route: "TP. H·ªì Ch√≠ Minh - Lagi", time: "12:00", price: 200000 },
    { route: "TP. H·ªì Ch√≠ Minh - Lagi", time: "18:00", price: 200000 },

    // Lagi ‚áÑ ƒê√† L·∫°t
    { route: "Lagi - ƒê√† L·∫°t", time: "06:00", price: 299000 },
    { route: "Lagi - ƒê√† L·∫°t", time: "12:00", price: 299000 },
    { route: "Lagi - ƒê√† L·∫°t", time: "18:00", price: 299000 },
    { route: "ƒê√† L·∫°t - Lagi", time: "06:00", price: 299000 },
    { route: "ƒê√† L·∫°t - Lagi", time: "12:00", price: 299000 },
    { route: "ƒê√† L·∫°t - Lagi", time: "18:00", price: 299000 },

    // Lagi ‚áÑ Nha Trang
    { route: "Lagi - Nha Trang", time: "06:00", price: 345000 },
    { route: "Lagi - Nha Trang", time: "12:00", price: 345000 },
    { route: "Lagi - Nha Trang", time: "18:00", price: 345000 },
    { route: "Nha Trang - Lagi", time: "06:00", price: 345000 },
    { route: "Nha Trang - Lagi", time: "12:00", price: 345000 },
    { route: "Nha Trang - Lagi", time: "18:00", price: 345000 }
];

// üîπ Sinh danh s√°ch chuy·∫øn xe cho th√°ng 4/2025 (ch·∫°y m·ªôt l·∫ßn)
async function generateTripsIfNotExist() {
    const year = 2025;
    const month = 3; // Th√°ng 4 (JS b·∫Øt ƒë·∫ßu t·ª´ 0)

    for (let day = 1; day <= 30; day++) {
        const dateStr = new Date(year, month, day).toISOString().split("T")[0];
        for (const template of routeTemplates) {
            const exists = await Trip.findOne({
                departure: template.route.split(" - ")[0],
                destination: template.route.split(" - ")[1],
                date: dateStr,
                time: template.time
            });

            if (!exists) {
                await Trip.create({
                    departure: template.route.split(" - ")[0],
                    destination: template.route.split(" - ")[1],
                    date: dateStr,
                    time: template.time,
                    price: template.price,
                    bookings: []
                });
            }
        }
    }
}

generateTripsIfNotExist(); // G·ªçi khi kh·ªüi ƒë·ªông app

// üîπ L·∫•y ƒëi·ªÉm ƒë√≥n/tr·∫£ theo tuy·∫øn
router.get("/pickup-points", (req, res) => {
    const { route } = req.query;

    if (!routes[route]) {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y tuy·∫øn ƒë∆∞·ªùng n√†y!" });
    }

    res.json(routes[route]);
});

// üîπ API l·∫•y danh s√°ch chuy·∫øn theo tuy·∫øn & ng√†y (c·∫£ 2 chi·ªÅu)
router.get("/", async(req, res) => {
    const { route, date } = req.query;

    if (!route || !date) {
        return res.status(400).json({ message: "Thi·∫øu th√¥ng tin tuy·∫øn ho·∫∑c ng√†y!" });
    }

    const [from, to] = route.split(" - ");

    const trips = await Trip.find({
        date,
        $or: [
            { departure: from, destination: to },
            { departure: to, destination: from }
        ]
    });

    if (!trips || trips.length === 0) {
        return res.status(404).json({ message: "Kh√¥ng c√≥ chuy·∫øn xe n√†o trong ng√†y n√†y!" });
    }

    res.json(trips);
});


// üîπ API l·∫•y gh·∫ø ƒë√£ ƒë·∫∑t
router.get("/bookings", async(req, res) => {
    const { date, time } = req.query;

    try {
        const bookings = await Booking.find({ date, time });
        const bookedSeats = bookings.map(b => b.seat);
        res.json({ bookedSeats });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "L·ªói khi l·∫•y gh·∫ø ƒë√£ ƒë·∫∑t" });
    }
});

// API ƒë·∫∑t v√©
router.post("/bookings", async(req, res) => {
    const { tripId, seats, customerName, customerPhone, paymentStatus } = req.body;

    try {
        // Ki·ªÉm tra chuy·∫øn xe c√≥ t·ªìn t·∫°i kh√¥ng
        const trip = await Trip.findById(tripId);
        if (!trip) {
            return res.status(400).json({ message: "Chuy·∫øn xe kh√¥ng t·ªìn t·∫°i!" });
        }

        // L∆∞u th√¥ng tin ƒë·∫∑t v√© v√†o c∆° s·ªü d·ªØ li·ªáu
        const newBooking = new Booking({
            tripId,
            seats,
            customerName,
            customerPhone,
            paymentStatus
        });

        await newBooking.save();

        // C·∫≠p nh·∫≠t gh·∫ø ƒë√£ ƒë·∫∑t v√†o chuy·∫øn xe
        trip.bookings.push(newBooking._id);
        await trip.save();

        res.status(201).json({ message: "ƒê·∫∑t v√© th√†nh c√¥ng!", bookedSeats: seats });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: true, message: "L·ªói khi ƒë·∫∑t v√©" });
    }
});


// Admin xem t·∫•t c·∫£ v√© ƒë√£ ƒë·∫∑t
router.get('/bookings/admin', verifyAdmin, async(req, res) => {
    try {
        const bookings = await Booking.find().populate('tripId'); // Li√™n k·∫øt v·ªõi chuy·∫øn xe
        res.status(200).json(bookings);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi l·∫•y d·ªØ li·ªáu v√© xe' });
    }
});


module.exports = router;